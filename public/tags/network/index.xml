<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on </title>
    <link>https://1rvinn.github.io/tags/network/</link>
    <description>Recent content in Network on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://1rvinn.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>browseher</title>
      <link>https://1rvinn.github.io/build/browser/</link>
      <pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate>
      
      <guid>https://1rvinn.github.io/build/browser/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;10/05/25&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;i dont know why but recently i’ve been getting this urge to build a browser of my own. something that’s bespoke to my needs - has ai inbuilt, is junk free and everything is the way i want it. yeah maybe if it turns out to be amazing, i may plan on launching it but that’s for me to worry about later.&lt;/p&gt;
&lt;p&gt;i found this &lt;a href=&#34;https://browser.engineering/&#34;&gt;primer&lt;/a&gt; which is in and out of what a browser entails and how to build it on your own.&lt;/p&gt;</description>
      <content>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;10/05/25&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;i dont know why but recently i’ve been getting this urge to build a browser of my own. something that’s bespoke to my needs - has ai inbuilt, is junk free and everything is the way i want it. yeah maybe if it turns out to be amazing, i may plan on launching it but that’s for me to worry about later.&lt;/p&gt;
&lt;p&gt;i found this &lt;a href=&#34;https://browser.engineering/&#34;&gt;primer&lt;/a&gt; which is in and out of what a browser entails and how to build it on your own.&lt;/p&gt;
&lt;p&gt;doing a bit of research, i have realised that it is kinda hard to do it all from scratch, not only because it is going to be very long but also because of the compute inefficiency of the product you’ll get out with - very laggy, sucking all the juice out your ram.&lt;/p&gt;
&lt;p&gt;i could build it on top of chromium, but that wont teach me a lot about browsers and networking.&lt;/p&gt;
&lt;p&gt;so i have decided to do neither and both at the same time. i’ll follow the primer, understand the basics right and then switch over to building over chromium, which i believe is also going to be imperative if i want to integrate ai into it — could be wrong, i dont really know.&lt;/p&gt;
&lt;p&gt;the best thing would still be to do it all from scratch, but let’s see where reading the primer leads me to and then make a decision likewise.&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;[update] 12/06/25&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;have built a very bare bones version that can display basic web pages (only text lmao not even html). ik, very far away from my final goal, but i have realised how hard it is to build a browser and definitely wouldn&amp;rsquo;t be able to make the one of my dreams from scratch - will have to capitalise on the chromium infra (now i understand the imp of open source). \
but the process is v.v. cool cuz im learning a hell lot about how the internet functions. it aint all a blackbox anymore.&lt;/p&gt;
&lt;hr&gt;
</content>
    </item>
    
    <item>
      <title>on webrtc</title>
      <link>https://1rvinn.github.io/crude/webrtc/</link>
      <pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://1rvinn.github.io/crude/webrtc/</guid>
      <description>&lt;p&gt;got to know about a very interesting framework today - the webrtc. it is a google developed method that facilitates exchange of data and information between browsers by establishing a web p2p connection. and the best part about it is that it doesn’t require a server to transfer data. yes, it does require one to establish the newtork but that’s it. after the connection is setup, all transfer happens from the sender’s browser to the receiver’s without the play of any server in between. crazy innit? there have been a few implementations of this framework - browser to browser chat, video call and, the most interesting of them all, file transfer. there is a project called file.pizza which saves data and time by reducing the 2 step - upload, download cycle to a single step - transfer. only when the receiver requests for the file does the file gets transfered. no need to upload it to a mutually accessible place and downloading it, rather just get your unique file pizza link and share it over to the person accessing the file. however, a few drawbacks of this include the sender having to keep the link open until the receiver dowloads it and having to repeat the process over again everytime you want someone to download it, since the link gets terminated with the session’s end. it is but, at the end of the day, an interesting approach. i’m thinking of other applications of this, there are certain very intuitive ones - texting, video, mails - the entire sphere of information transfer - which is better this way by virtue of low data requirement and more security due to the lack of a central sever (kinda unsure about this point since there could always be attacks on the way). but these are only the very basic implementations of the framework. there has to be something novel, something that can leverage this platform to solve a bigger issue. [TBC]&lt;/p&gt;</description>
      <content>&lt;p&gt;got to know about a very interesting framework today - the webrtc. it is a google developed method that facilitates exchange of data and information between browsers by establishing a web p2p connection. and the best part about it is that it doesn’t require a server to transfer data. yes, it does require one to establish the newtork but that’s it. after the connection is setup, all transfer happens from the sender’s browser to the receiver’s without the play of any server in between. crazy innit? there have been a few implementations of this framework - browser to browser chat, video call and, the most interesting of them all, file transfer. there is a project called file.pizza which saves data and time by reducing the 2 step - upload, download cycle to a single step - transfer. only when the receiver requests for the file does the file gets transfered. no need to upload it to a mutually accessible place and downloading it, rather just get your unique file pizza link and share it over to the person accessing the file. however, a few drawbacks of this include the sender having to keep the link open until the receiver dowloads it and having to repeat the process over again everytime you want someone to download it, since the link gets terminated with the session’s end. it is but, at the end of the day, an interesting approach. i’m thinking of other applications of this, there are certain very intuitive ones - texting, video, mails - the entire sphere of information transfer - which is better this way by virtue of low data requirement and more security due to the lack of a central sever (kinda unsure about this point since there could always be attacks on the way). but these are only the very basic implementations of the framework. there has to be something novel, something that can leverage this platform to solve a bigger issue. [TBC]&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
